version: "3.8"
x-dela: &dela
  build:
    dockerfile: Dockerfiles/Dockerfile.dela
    context: ../
    target: build
  env_file: ../.env
  profiles:
    - dela
    - all
x-dela-env: &dela-env
  PROXYKEY: ${PUBLIC_KEY}
  PROXY_LOG: info
  LLVL: debug

services:

  dela-worker-0:             # inital DELA leader node
    <<: *dela
    environment:
      <<: *dela-env
      PUBLIC_URL: grpc://dela-worker-0:2000
    volumes:
      - dela-worker-0-data:/data
    ports:
      - 127.0.0.1:40000:40000
    networks:
      d-voting:
        ipv4_address: 172.19.44.254
  dela-worker-1:             # DELA worker node
    <<: *dela
    volumes:
      - dela-worker-1-data:/data
    environment:
      <<: *dela-env
      PUBLIC_URL: grpc://dela-worker-1:2000
    ports:
      - 127.0.0.1:40001:40000
    networks:
      d-voting:
        ipv4_address: 172.19.44.253
  dela-worker-2:             # DELA worker node
    <<: *dela
    volumes:
      - dela-worker-2-data:/data
    environment:
      <<: *dela-env
      PUBLIC_URL: grpc://dela-worker-2:2000
    ports:
      - 127.0.0.1:40002:40000
    networks:
      d-voting:
        ipv4_address: 172.19.44.252
  dela-worker-3:             # DELA worker node
    <<: *dela
    volumes:
      - dela-worker-3-data:/data
    environment:
      <<: *dela-env
      PUBLIC_URL: grpc://dela-worker-3:2000
    ports:
      - 127.0.0.1:40003:40000
    networks:
      d-voting:
        ipv4_address: 172.19.44.251

  frontend:         # web service frontend
    image: ghcr.io/dedis/d-voting-frontend:latest
    build:
      dockerfile: Dockerfiles/Dockerfile.frontend
      context: ../
    ports:
      - 127.0.0.1:3000:3000
    command: run start
    volumes:
      - ../web/frontend/src:/web/frontend/src     # mount codebase for development
    env_file: ../.env
    profiles:
      - client
      - all
    networks:
      d-voting:
        ipv4_address: 172.19.44.2

  backend:          # web service backend
    image: ghcr.io/dedis/d-voting-backend:latest
    build:
      dockerfile: Dockerfiles/Dockerfile.backend
      context: ../
    command: run start-dev
    env_file: ../.env
    ports:
      - 127.0.0.1:5000:5000
    depends_on:
      db:
        condition: service_started
    volumes:
      - backend-data:/data
      - ../web/backend/src:/web/backend/src       # mount codebase for development
    profiles:
      - client
      - all
    networks:
      d-voting:
        ipv4_address: 172.19.44.3

  db:               # PostgreSQL database
    image: postgres:15
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../web/backend/src/migration.sql:/docker-entrypoint-initdb.d/init.sql
    profiles:
      - client
      - all
    networks:
      d-voting:
        ipv4_address: 172.19.44.4

  shell:            # helper container to execute scripts from within Docker network (macOS/Windows setup)
    image: buildpack-deps:bookworm-curl
    env_file: ../.env
    profiles:
      - debug
      - all
    networks:
      d-voting:
        ipv4_address: 172.19.44.5
    volumes:
      - ../:/src

  firefox:          # helper container to execute Firefox within Docker network (macOS/Windows setup)
    image: jlesage/firefox
    profiles:
      - debug
      - all
    ports:
      - 127.0.0.1:5800:5800
    networks:
      d-voting:
        ipv4_address: 172.19.44.6

volumes:
  postgres-data:    # PostgreSQL database
  dela-worker-0-data:
  dela-worker-1-data:
  dela-worker-2-data:
  dela-worker-3-data:
  dela-worker-4-data:
  backend-data:

networks:
  d-voting:
    ipam:
      config:
        - subnet: 172.19.44.0/24
          gateway: 172.19.44.1
