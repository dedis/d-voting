{
  "env": {
    "browser": true,
    "es2021": true,
    "jest": true
  },
  "extends": [
    "react-app",
    "plugin:react-hooks/recommended",
    "airbnb-typescript",
    "plugin:import/recommended",
    "plugin:import/typescript",
    "plugin:prettier/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": ["tsconfig.json", "tests/tsconfig.json"]
  },
  "plugins": ["react", "@typescript-eslint", "jest", "unused-imports"],
  "root": true,
  "rules": {
    "react/jsx-filename-extension": ["error", { "extensions": [".jsx", ".tsx"] }],

    "import/extensions": ["error", "ignorePackages", {
      "js": "never",
      "mjs": "never",
      "jsx": "never",
      "ts": "never",
      "tsx": "never"
    }],

    "import/no-extraneous-dependencies": ["error", {"devDependencies": [
      "**/*.test.ts", "**/*.test.tsx",
      "**/setupTest.ts", "**/setupProxy.js",
      "**/mocks/*", "tests/*.ts"
    ]}],

    // conflicts with the index.ts (eslint prefers default exports which are not compatible with index.ts)
    "import/prefer-default-export": "off",

    "unused-imports/no-unused-imports": "error",
    "unused-imports/no-unused-vars": [
      "warn",
      {
        "vars": "all",
        "varsIgnorePattern": "^_",
        "args": "after-used",
        "argsIgnorePattern": "^_"
      }
    ],

    "sort-imports": [
      "error",
      {
        "ignoreDeclarationSort": true
      }
    ],

    // allow the usage of console output for debugging purposes
    "no-console": "off",

    "@typescript-eslint/no-unused-vars": "off",

    // disable object shorthand
    "object-shorthand": "off",

    "no-restricted-syntax": [
      "error",
      { 
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      },
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      { 
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ]
  },
  // we disable import/extensions eslint errors. Eslint underlines every import due to an
  // bug between typescript and eslint using the airbnb config
  "settings": {
    "import/resolver": {
      "node": {
        "paths": ["src"],
        "extensions": [".mjs", ".js", ".jsx", ".ts", ".tsx", ".json"]
      }
    }
  },
  "ignorePatterns": [
    "babel.config.js",
    "jest.config.js",
    "tailwind.config.js"
  ]
}
